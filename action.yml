name: Terraform Tests With LocalStack
description: GitHub action that runs Terraform tests using LocalStack.

branding:
  icon: check
  color: green

runs:
  using: composite

  steps:
    # Terraform
    - name: Setup Terraform
      if: ${{ inputs.terraform-version }}
      uses: hashicorp/setup-terraform@main
      with:
        terraform_version: "${{ inputs.terraform-version }}"
        terraform_wrapper: "${{ inputs.terraform-wrapper }}"

    - name: Install Linter addon
      if: ${{ inputs.run-linter == 'true' }}
      run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      shell: bash

    - name: Install Security Scanner addon
      if: ${{ inputs.run-security-scanner == 'true' }}
      run: curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      shell: bash

    # Unit Tests
    - name: Run Formatter
      if: ${{ inputs.run-formatter == 'true' }}
      run: |
        echo -e "\e[1;34m Running terraform fmt... \e[0m"
        terraform fmt -recursive
        echo -e "\e[1;33m terraform fmt check passed! \e[0m"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Run Linter
      if: ${{ inputs.run-linter == 'true' }}
      run: |
        echo -e "\e[1;34m Running tflint... \e[0m"
        tflint --recursive
        echo -e "\e[1;33m tflint check passed! \e[0m"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Run Security Scanner
      if: ${{ inputs.run-security-scanner == 'true' }}
      run: |
        echo -e "\e[1;34m Running tfsec... \e[0m"
        tfsec
        echo -e "\e[1;33m tfsec check passed! \e[0m"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Use GitHub Personal Access Token
      if: ${{ inputs.personal-access-token }}
      run: |
        echo -e "\e[1;34m Setting GitHub personal access token... \e[0m"
        git config --global url."https://${{ inputs.github-user }}:${{ inputs.personal-access-token }}@github.com".insteadOf https://github.com
        echo -e "\e[1;33m set Gitub personal access token! \e[0m"
      shell: bash

    - name: Run Terraform Init
      if: ${{ inputs.run-validator == 'true' }}
      run: |
        echo -e "\e[1;34m Initializing Terraform... \e[0m"
        terraform init "${{ inputs.args }}"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Run Terraform Validator
      if: ${{ inputs.run-validator == 'true' }}
      run: |
        echo -e "\e[1;34m Validating Terraform... \e[0m"
        terraform validate
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    # LocalStack
    - name: Setup LocalStack
      if: ${{ inputs.run-apply == 'true' }}
      uses: localstack/setup-localstack@main
      with:
        image-tag: "${{ inputs.localstack-image-tag }}"
        use-pro: "${{ inputs.localstack-use-pro }}"
      env:
        LOCALSTACK_API_KEY: "${{ inputs.localstack-api-key }}"

    - name: Install tflocal
      if: ${{ inputs.run-apply == 'true' }}
      run: pip install terraform-local
      shell: bash

      # Integration Tests
    - name: Run Terraform Integration Tests
      if: ${{ inputs.run-apply == 'true' }}
      run: |
        echo -e "\e[1;34m Applying Terraform... \e[0m"
        tflocal apply --auto-approve "${{ inputs.args }}"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

inputs:
  args:
    description: Arguments to use when running `terraform init` and `terraform apply`. E.g. "--backend-config=my-config-file.conf --var-file=dev.tfvars -var MY_VARIABLE=some_value"
    required: false

  github-user:
    default: "github-user"
    description: The GitHub user to associate with the personal access token. GitHub does not actually use this user so any value will work. Default is `github-user`.
    required: false

  localstack-api-key:
    description: The LocalStack API key to use when setting up LocalStack. Required if using LocalStack Pro.
    required: false
  
  localstack-image-tag:
    default: "latest"
    description: The LocalStack image tag to use when setting up LocalStack. Defaults to `latest`.
    required: false

  localstack-use-pro:
    default: "false"
    description: Whether or not to use LocalStack Pro. Defaults to `false`.
    required: false

  personal-access-token:
    description: The GitHub personal access token to use when running `terraform init`. Specify if any modules are stored in private repositories.
    required: false

  run-apply:
    default: "true"
    description: Whether or not to run `terraform apply --auto-approve`. Default is `true`.

  run-formatter:
    default: "true"
    description: Whether or not to run `terraform fmt -recursive`. Default is `true`.
    required: false

  run-linter:
    default: "true"
    description: Whether or not to run `tflint --recursive`. Default is `true`.
    required: false

  run-security-scanner:
    default: "true"
    description: Whether or not to run `tfsec`. Default is `true`.
    required: false

  run-validator:
    default: "true"
    description: Whether or not to run `terraform validate`. Default is `true`.
    required: false

  terraform-version:
    description: The Terraform version to setup. Required if Terraform is not previously setup.
    required: false

  terraform-wrapper:
    default: "false"
    description: Whether or not to enable to Terraform wrapper when setting up Terraform. Defaults to `false`.
    required: false

  working-directory:
    default: "."
    description: The working directory to run tests in. Default is the current directory.
    required: false
